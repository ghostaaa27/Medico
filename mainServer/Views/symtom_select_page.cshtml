@{
Layout = "~/Views/Shared/_Layout.cshtml";
}


<div class="txtBox">
    <p>Select Your Symtoms</p><br>
    <form action="">
        <select name="language" class="custom-select" multiple>
            <option value="html">Back Pain</option>
            <option value="css">Stomach Pain</option>
            <option value="javascript">Knee Pain</option>
            <option value="python">Constipation</option>
            <option value="sql">Fever</option>
            <option value="sql">Cough</option>
            <option value="sql">Tiredness</option>
            <option value="sql">Headache</option>
            <option value="sql">Aches</option>
            <option value="sql">Itching</option>
            <option value="sql">Skin Rash</option>
            <option value="sql">Shivering</option>
            <option value="sql">Chills</option>
            <option value="sql">Joint Pain</option>
            <option value="sql">Fatigue</option>
            <option value="sql">Nausea</option>
            <option value="sql">Loss of Appetite</option>
            <option value="sql">Blister</option>
            <option value="sql">Palpitations</option>
        </select>
    </form>



</div>
<div class="selected_items">
    <div class="container">

        <div class="card">
            <h2>Selected Symtoms</h2>
            <br>
            <div id="sitemList"></div>
            @* <a href="/ResultPage" class="predict_button">Predict</a> *@
            <a id = "predict_button_id" onclick="SymtomList()" class="predict_button">Predict</a>
        </div>
    </div>

</div>





<script>

    selectedItems = [];
    
    class CustomSelect {
        constructor(originalSelect) {
            this.originalSelect = originalSelect;
            this.customSelect = document.createElement("div");
            this.customSelect.classList.add("select");

            this.originalSelect.querySelectorAll("option").forEach((optionElement) => {
                const itemElement = document.createElement("div");

                itemElement.classList.add("select__item");
                itemElement.textContent = optionElement.textContent;
                this.customSelect.appendChild(itemElement);

                if (optionElement.selected) {
                    this._select(itemElement);
                }

                itemElement.addEventListener("click", () => {
                    if (
                        this.originalSelect.multiple &&
                        itemElement.classList.contains("select__item--selected")
                    ) {
                        this._deselect(itemElement);
                    } else {
                        this._select(itemElement);
                    }
                });
            });

            this.originalSelect.insertAdjacentElement("afterend", this.customSelect);
            this.originalSelect.style.display = "none";
        }

        _select(itemElement) {
            const index = Array.from(this.customSelect.children).indexOf(itemElement);

            if (!this.originalSelect.multiple) {
                this.customSelect.querySelectorAll(".select__item").forEach((el) => {
                    el.classList.remove("select__item--selected");
                });
            }

            this.originalSelect.querySelectorAll("option")[index].selected = true;
            itemElement.classList.add("select__item--selected");

            var selected_val = this.originalSelect.querySelectorAll("option")[index].textContent;
            @* console.log(typeof(selected_val)); *@
            selectedItems.push(selected_val);
            selectedItemList();

        }

        _deselect(itemElement) {
            const index = Array.from(this.customSelect.children).indexOf(itemElement);

            this.originalSelect.querySelectorAll("option")[index].selected = false;
            itemElement.classList.remove("select__item--selected");

            var selected_val = this.originalSelect.querySelectorAll("option")[index].textContent;
            @* console.log(selected_val); *@
            var sitem_idx = selectedItems.indexOf(selected_val);
            if(sitem_idx == 0){
                selectedItems.splice(sitem_idx, sitem_idx+1);
            }
            else{
                selectedItems.splice(sitem_idx, sitem_idx);
            }
            selectedItemList();
        }
    }

    document.querySelectorAll(".custom-select").forEach((selectElement) => {
        new CustomSelect(selectElement);
    });

@* 
function listPrint(){
    console.log(selectedItems);
} *@


function selectedItemList(){
     
    var sitemList = $("#sitemList");
    sitemList.empty();

    $.each(selectedItems, function(i, item) {
        $('<div >').append(
            $('<a class="items">').text(item)
        ).appendTo(sitemList)
    });
}

function selectedItemListDel(){
     
    var sitemList = $("#sitemList");
    sitemList.empty();
    console.log("selectedItemList")

    $.each(selectedItems, function(i, item) {
        $('<div >').append(
            $('<a class="items">').text(item)
        ).appendTo(sitemList)
    });
}


function SymtomList(){

    $.ajax({
            url: "http://127.0.0.1:8000/predicted_disease",
            type: "POST",
            data: {arrData: selectedItems },
            success: function(result) {
                var disease = "";
                var accuracy = "";
                for(i = 0; i<result.length; i++){
                    if((result[i]>='A' && result[i]<='Z') || (result[i]>='a' && result[i]<='z') || result[i]==' '){
                        disease += result[i]; 
                    }
                    else{
                        accuracy += result[i]
                    }
                }

                window.location.href = "https://localhost:5001/ResultPage?disease="+disease+"&accuracy="+accuracy;
            },
            error: function() {
              alert("I am sorry something wrong");  
            }
        });
}






</script>